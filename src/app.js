const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const { errorHandler, notFoundHandler, logger } = require('./middleware/errorHandler');
const { globalLimiter } = require('./middleware/rateLimiter');
const { testConnection, createTables } = require('./config/database');

// ุงุณุชูุฑุงุฏ ุงููุณุงุฑุงุช
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const symptomRoutes = require('./routes/symptomRoutes');
const adminRoutes = require('./routes/adminRoutes');

const app = express();

// ุฅุนุฏุงุฏ ุงูู Middleware ุงูุฃุณุงุณู
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(globalLimiter);

// ุชุณุฌูู ุงููุณุงุฑุงุช
app.use('/api/auth', authRoutes);
app.use('/api/user', userRoutes);
app.use('/api/symptoms', symptomRoutes);
app.use('/api/admin', adminRoutes);

// ููุทุฉ ููุงูุฉ ููุชุญูู ูู ุญุงูุฉ ุงูุฎุฏูุฉ
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV
  });
});

// ุงูุชุนุงูู ูุน ุงููุณุงุฑุงุช ุบูุฑ ุงูููุฌูุฏุฉ
app.use(notFoundHandler);
app.use(errorHandler);

// ุฏุงูุฉ ุจุฏุก ุงูุชุดุบูู
const startServer = async () => {
  try {
    // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('โณ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');

    // ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุญุณุงุจ ุงููุณุคูู
    console.log('โณ ุฌุงุฑู ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    await createTables();
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    console.log(`โ ุชู ุฅูุดุงุก/ุงูุชุญูู ูู ุญุณุงุจ ุงููุณุคูู: ${process.env.DEFAULT_ADMIN_EMAIL}`);

    // ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`
๐ ุชู ุชุดุบูู ุงูุฎุงุฏู ุจูุฌุงุญ!
๐ก ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ: ${PORT}
๐ ุงูุจูุฆุฉ: ${process.env.NODE_ENV}
๐ ุฑุงุจุท API: ${process.env.API_URL}
      `);
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู:', error.message);
    process.exit(1);
  }
};

// ูุนุงูุฌุฉ ุฅุบูุงู ุงูุชุทุจูู ุจุดูู ุขูู
process.on('SIGTERM', () => {
  console.log('โณ ุฌุงุฑู ุฅุบูุงู ุงูุชุทุจูู ุจุดูู ุขูู...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('โณ ุฌุงุฑู ุฅุบูุงู ุงูุชุทุจูู ุจุดูู ุขูู...');
  process.exit(0);
});

// ุจุฏุก ุงูุชุทุจูู
if (require.main === module) {
  console.log(`
=======================================
๐ฅ ูุธุงู ุชุญููู ุงูุฃุนุฑุงุถ ุงูุตุญูุฉ
=======================================
  `);
  startServer().catch((error) => {
    console.error('โ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
    process.exit(1);
  });
}

module.exports = app;